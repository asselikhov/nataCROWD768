const Content = require('../models/Content');
const { Markup } = require('telegraf');

async function getContent(section) {
    try {
        const content = await Content.findOne({ section });
        return content || { text: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–¥–∞–Ω' };
    } catch (err) {
        console.error('Error fetching content from MongoDB:', err);
        return { text: '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–¥–∞–Ω' };
    }
}

function contentHandler(bot) {
    bot.start(async (ctx) => {
        const username = ctx.from.first_name || ctx.from.username || '–ì–æ—Å—Ç—å';

        const businessCard = `
üåü *–í–∞—à–∞ –í–∏–∑–∏—Ç–∫–∞* üåü  
üë§ *–ò–º—è:* –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤  
üíº *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∏ CEO  
üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* FutureTech Solutions  
üìù *–û –Ω–∞—Å:* –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–æ–∑–¥–∞—é—â–∞—è —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –±—É–¥—É—â–µ–≥–æ.  
üìç *–ê–¥—Ä–µ—Å:* –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥. 42  
üìß *Email:* ivan@futuretech.com  
üåê *–°–∞–π—Ç:* www.futuretech.com  
`;

        try {
            console.log('Starting /start handler for user:', username);
            const about = await getContent('about');
            console.log('Fetched about content:', about.text);

            await ctx.replyWithAnimation(
                'AgAD4GoAAhkw4Uo', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –≤–∞–ª–∏–¥–Ω—ã–π file_id –∞–Ω–∏–º–∞—Ü–∏–∏
                { caption: `‚ú® –ü—Ä–∏–≤–µ—Ç, ${username}! –í–æ—Ç –º–æ—è –≤–∏–∑–∏—Ç–∫–∞:` }
            );
            console.log('Sent animation');

            await ctx.replyWithMarkdownV2(
                businessCard.replace(/([_*[\]()~`>#+-=|{}.!])/g, '\\$1'),
                Markup.inlineKeyboard([
                    [Markup.button.callback('üåü –û –∫–æ–º–ø–∞–Ω–∏–∏', 'about')],
                    [Markup.button.callback('üõç –ü—Ä–æ–¥—É–∫—Ü–∏—è', 'showcase')],
                    [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è', 'contact')],
                ])
            );
            console.log('Sent business card with buttons');
        } catch (err) {
            console.error('Error sending start message:', err);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–∑–∏—Ç–∫–∏');
        }
    });

    bot.action('about', async (ctx) => {
        try {
            const about = await getContent('about');
            await ctx.replyWithMarkdownV2(`*–û –∫–æ–º–ø–∞–Ω–∏–∏*\n${about.text.replace(/([_*[\]()~`>#+-=|{}.!])/g, '\\$1')}`);
            ctx.answerCbQuery();
        } catch (err) {
            console.error('Error in about action:', err);
            ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏');
        }
    });

    bot.action('contact', (ctx) => {
        ctx.reply('üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @YourContact | +7 (XXX) XXX-XX-XX');
        ctx.answerCbQuery();
    });

    bot.command('edit', async (ctx) => {
        if (ctx.from.id !== Number(process.env.ADMIN_ID)) return;

        const [section, ...text] = ctx.message.text.split(' ').slice(1);
        if (!section || !text.length) {
            return ctx.reply('–§–æ—Ä–º–∞—Ç: /edit [section] [text]');
        }

        try {
            await Content.findOneAndUpdate(
                { section },
                { text: text.join(' '), updatedAt: new Date() },
                { upsert: true }
            );
            ctx.reply(`–ö–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ "${section}" –æ–±–Ω–æ–≤–ª–µ–Ω`);
        } catch (err) {
            console.error('Error editing content:', err);
            ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        }
    });
}

module.exports = { contentHandler };